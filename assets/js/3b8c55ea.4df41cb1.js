"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3217],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,y=d["".concat(s,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(y,l(l({ref:t},p),{},{components:n})):a.createElement(y,l({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var c=2;c<r;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9250:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>r,contentTitle:()=>l,metadata:()=>i,toc:()=>s,default:()=>p});var a=n(7462),o=(n(7294),n(3905));const r={id:"installation-mac",title:"Installation on MacOs",sidebar_label:"Installation - Mac"},l=void 0,i={unversionedId:"installation-mac",id:"installation-mac",isDocsHomePage:!1,title:"Installation on MacOs",description:"You should install the XEST CLI first then start working on your project.",source:"@site/docs/installation.md",sourceDirName:".",slug:"/installation-mac",permalink:"/docs/installation-mac",editUrl:"https://github.com/CyprusCodes/xest/tree/main/documentation/docs/docs/installation.md",tags:[],version:"current",frontMatter:{id:"installation-mac",title:"Installation on MacOs",sidebar_label:"Installation - Mac"},sidebar:"docs",previous:{title:"What is Xest?",permalink:"/docs/what-is-xest-why"},next:{title:"Installation - Ubuntu",permalink:"/docs/installation-ubuntu"}},s=[{value:"Bootstrapping Your API",id:"bootstrapping-your-api",children:[],level:2}],c={toc:s};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"You should install the XEST CLI first then start working on your project."),(0,o.kt)("p",null,"To install XEST CLI;"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm install xest -g\n")),(0,o.kt)("p",null,"After installing the XEST CLI globally, you can now bootstrap your API."),(0,o.kt)("h2",{id:"bootstrapping-your-api"},"Bootstrapping Your API"),(0,o.kt)("p",null,"In order to create your API, you need to run the following commmand:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ xx [project-name]\n")),(0,o.kt)("p",null,"With one simple command, you will be installing all the necessary packages, utils, middlewares and required modules will be created for you. Have a look at the created directory."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ cd project-name\n")),(0,o.kt)("p",null,"to start your Xest API, run"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ xx run\n")),(0,o.kt)("p",null,"Et voila! You're ready to Xest :)"),(0,o.kt)("p",null,"The project-name directory will be created, node modules and a few other boilerplate files will be installed, and a src/ directory will be created and populated with several core files, forming a new API-directory with the following setup;"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 index.js\n\u251c\u2500\u2500 package-lock.json\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 node_modules\n\u251c\u2500\u2500 migrations\n\u251c\u2500\u2500 test\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 .eslintignore\n\u251c\u2500\u2500 .eslintrc\n\u251c\u2500\u2500 .gitattributes\n\u251c\u2500\u2500 database.json\n\u251c\u2500\u2500 jsconfig.json\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 database\n\u2502 \u251c\u2500\u2500 database-schema.sql\n\u2502 \u2514\u2500\u2500 seed-data.sql\n\u2502 \u2514\u2500\u2500 docker-compose.yml\n\u2502 \u2514\u2500\u2500 test-database.json\n\u2514\u2500\u2500 src\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," is our local development environment configuration. When you run your application, a MySQL container will be started for you. You can connect to the local database instance by using the credentials listed in the ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," file."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"database-schema.sql")," is where you will define your database schema. It will be a series of CREATE TABLE statements which is used to populate your local development database."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"seed-data.sql")," will contain the test data that you want to insert into your database whilst developing or testing your application locally."))}p.isMDXComponent=!0}}]);