"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[8072],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>u});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),d=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=d(e.components);return a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=d(t),u=r,g=m["".concat(s,".").concat(u)]||m[u]||p[u]||o;return t?a.createElement(g,i(i({ref:n},c),{},{components:t})):a.createElement(g,i({ref:n},c))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var d=2;d<o;d++)i[d]=t[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3761:(e,n,t)=>{t.r(n),t.d(n,{frontMatter:()=>o,contentTitle:()=>i,metadata:()=>l,toc:()=>s,default:()=>c});var a=t(7462),r=(t(7294),t(3905));const o={id:"data-table-custom-actions",title:"Data Table Custom Actions",sidebar_label:"Data Table Custom Actions"},i="Implementing Edit Actions with Modal Forms in Xest Data Table",l={unversionedId:"data-table-custom-actions",id:"data-table-custom-actions",isDocsHomePage:!1,title:"Data Table Custom Actions",description:"This guide demonstrates how to create an edit action with a modal form to update records in Xest Data Table.",source:"@site/docs/data-table-custom-actions.md",sourceDirName:".",slug:"/data-table-custom-actions",permalink:"/docs/data-table-custom-actions",editUrl:"https://github.com/CyprusCodes/xest/tree/main/documentation/docs/docs/data-table-custom-actions.md",tags:[],version:"current",frontMatter:{id:"data-table-custom-actions",title:"Data Table Custom Actions",sidebar_label:"Data Table Custom Actions"},sidebar:"docs",previous:{title:"Data Table React",permalink:"/docs/data-table-react"}},s=[{value:"1. Create the Edit Component",id:"1-create-the-edit-component",children:[],level:2},{value:"2. Add Form Validation",id:"2-add-form-validation",children:[],level:2},{value:"3. Integrate with Xest Data Table",id:"3-integrate-with-xest-data-table",children:[],level:2},{value:"4. Add Loading States",id:"4-add-loading-states",children:[],level:2},{value:"5. Handle API Integration",id:"5-handle-api-integration",children:[],level:2},{value:"Best Practices",id:"best-practices",children:[],level:2},{value:"Complete Example",id:"complete-example",children:[],level:2}],d={toc:s};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"implementing-edit-actions-with-modal-forms-in-xest-data-table"},"Implementing Edit Actions with Modal Forms in Xest Data Table"),(0,r.kt)("p",null,"This guide demonstrates how to create an edit action with a modal form to update records in Xest Data Table."),(0,r.kt)("h2",{id:"1-create-the-edit-component"},"1. Create the Edit Component"),(0,r.kt)("p",null,"First, create a separate component for the edit functionality:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript:src/components/EditRecordAction/index.tsx"},'interface EditRecordProps {\n    record: {\n        id: number;\n        name: string;\n        email: string;\n        // ... other record fields\n    };\n    onUpdate: () => void;\n}\n\nfunction EditRecordAction({ record, onUpdate }: EditRecordProps) {\n    const [open, setOpen] = useState(false);\n    const [formData, setFormData] = useState({\n        name: record.name,\n        email: record.email,\n    });\n\n    const handleUpdate = async () => {\n        try {\n            await updateRecord(record.id, formData);\n            toast.success("Record updated successfully");\n            setOpen(false);\n            onUpdate(); // Refresh table data\n        } catch (error) {\n            toast.error("Failed to update record");\n        }\n    };\n\n    return (\n        <Dialog open={open} onOpenChange={setOpen}>\n            <DialogTrigger asChild>\n                <Button variant="outline">\n                    <Pencil className="h-4 w-4" />\n                    Edit\n                </Button>\n            </DialogTrigger>\n            <DialogContent>\n                <DialogHeader>\n                    <DialogTitle>Edit Record</DialogTitle>\n                </DialogHeader>\n                <div className="space-y-4">\n                    <div>\n                        <Label>Name</Label>\n                        <Input\n                            value={formData.name}\n                            onChange={(e) => setFormData(prev => ({\n                                ...prev,\n                                name: e.target.value\n                            }))}\n                        />\n                    </div>\n                    <div>\n                        <Label>Email</Label>\n                        <Input\n                            value={formData.email}\n                            onChange={(e) => setFormData(prev => ({\n                                ...prev,\n                                email: e.target.value\n                            }))}\n                        />\n                    </div>\n                </div>\n                <DialogFooter>\n                    <Button onClick={handleUpdate}>\n                        Save Changes\n                    </Button>\n                </DialogFooter>\n            </DialogContent>\n        </Dialog>\n    );\n}\n')),(0,r.kt)("h2",{id:"2-add-form-validation"},"2. Add Form Validation"),(0,r.kt)("p",null,"Use Zod to validate the form data:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript:src/components/EditRecordAction/validation.ts"},'const editSchema = z.object({\n    name: z.string().min(1, "Name is required"),\n    email: z.string().email("Invalid email address")\n});\n\n// In your component:\nconst handleUpdate = async () => {\n    const result = editSchema.safeParse(formData);\n    if (!result.success) {\n        toast.error(result.error.issues[0].message);\n        return;\n    }\n\n    try {\n        await updateRecord(record.id, formData);\n        // ... rest of the code\n    } catch (error) {\n        // ... error handling\n    }\n};\n')),(0,r.kt)("h2",{id:"3-integrate-with-xest-data-table"},"3. Integrate with Xest Data Table"),(0,r.kt)("p",null,"Add the edit action to your table columns:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript:src/components/YourDataTable/index.tsx"},"import { useTable } from '@xest-ui/data-table';\n\nfunction YourDataTable() {\n    const { data: { refresh } } = useTable();\n\n    const columns: Col<RecordType>[] = [\n        // ... other columns\n        {\n            title: \"Actions\",\n            render: (record) => (\n                <EditRecordAction\n                    record={record}\n                    onUpdate={refresh}\n                />\n            ),\n        }\n    ];\n\n    return (\n        <TableProvider\n            params={{\n                // ... your table configuration\n            }}\n            columns={columns}\n        >\n            <DataTable />\n        </TableProvider>\n    );\n}\n")),(0,r.kt)("h2",{id:"4-add-loading-states"},"4. Add Loading States"),(0,r.kt)("p",null,"Improve user experience by adding loading states:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'function EditRecordAction({ record, onUpdate }: EditRecordProps) {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleUpdate = async () => {\n    setIsLoading(true);\n    try {\n      await updateRecord(record.id, formData);\n      toast.success("Record updated successfully");\n      setOpen(false);\n      onUpdate();\n    } catch (error) {\n      toast.error("Failed to update record");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Dialog>\n      {/* ... dialog content ... */}\n      <DialogFooter>\n        <Button onClick={handleUpdate} disabled={isLoading}>\n          {isLoading ? (\n            <>\n              <Loader2 className="mr-2 h-4 w-4 animate-spin" />\n              Saving...\n            </>\n          ) : (\n            "Save Changes"\n          )}\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n}\n')),(0,r.kt)("h2",{id:"5-handle-api-integration"},"5. Handle API Integration"),(0,r.kt)("p",null,"Create a service function for the update operation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript:src/services/records/updateRecord.ts"},"interface UpdateRecordData {\n    name: string;\n    email: string;\n}\n\nexport async function updateRecord(id: number, data: UpdateRecordData) {\n    const response = await fetch(`/api/records/${id}`, {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n    });\n\n    if (!response.ok) {\n        throw new Error('Failed to update record');\n    }\n\n    return response.json();\n}\n")),(0,r.kt)("h2",{id:"best-practices"},"Best Practices"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Form State Management")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Initialize form with current record data"),(0,r.kt)("li",{parentName:"ul"},"Handle form changes efficiently"),(0,r.kt)("li",{parentName:"ul"},"Validate before submission"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Error Handling")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Display validation errors clearly"),(0,r.kt)("li",{parentName:"ul"},"Show API error messages to users"),(0,r.kt)("li",{parentName:"ul"},"Maintain form state on error"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"UX Considerations")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Show loading states during submission"),(0,r.kt)("li",{parentName:"ul"},"Disable form while submitting"),(0,r.kt)("li",{parentName:"ul"},"Close modal on successful update"),(0,r.kt)("li",{parentName:"ul"},"Refresh table data after update"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Modal Management")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Handle modal open/close states"),(0,r.kt)("li",{parentName:"ul"},"Reset form when modal closes"),(0,r.kt)("li",{parentName:"ul"},"Confirm before closing with unsaved changes")))),(0,r.kt)("h2",{id:"complete-example"},"Complete Example"),(0,r.kt)("p",null,"Here's a full implementation combining all the above concepts:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript:src/components/EditRecordAction/index.tsx"},'import { useState, useEffect } from \'react\';\nimport { z } from \'zod\';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \'@/components/ui/dialog\';\nimport { Button } from \'@/components/ui/button\';\nimport { Input } from \'@/components/ui/input\';\nimport { Label } from \'@/components/ui/label\';\nimport { Loader2, Pencil } from \'lucide-react\';\nimport { toast } from \'react-hot-toast\';\nimport { updateRecord } from \'@/services/records/updateRecord\';\n\nconst editSchema = z.object({\n    name: z.string().min(1, "Name is required"),\n    email: z.string().email("Invalid email address")\n});\n\ninterface EditRecordProps {\n    record: {\n        id: number;\n        name: string;\n        email: string;\n    };\n    onUpdate: () => void;\n}\n\nexport function EditRecordAction({ record, onUpdate }: EditRecordProps) {\n    const [open, setOpen] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n    const [formData, setFormData] = useState({\n        name: record.name,\n        email: record.email,\n    });\n\n    // Reset form when modal closes\n    useEffect(() => {\n        if (!open) {\n            setFormData({\n                name: record.name,\n                email: record.email,\n            });\n        }\n    }, [open, record]);\n\n    const handleUpdate = async () => {\n        const result = editSchema.safeParse(formData);\n        if (!result.success) {\n            toast.error(result.error.issues[0].message);\n            return;\n        }\n\n        setIsLoading(true);\n        try {\n            await updateRecord(record.id, formData);\n            toast.success("Record updated successfully");\n            setOpen(false);\n            onUpdate();\n        } catch (error) {\n            toast.error("Failed to update record");\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    return (\n        <Dialog open={open} onOpenChange={setOpen}>\n            <DialogTrigger asChild>\n                <Button variant="outline" size="sm">\n                    <Pencil className="h-4 w-4 mr-2" />\n                    Edit\n                </Button>\n            </DialogTrigger>\n            <DialogContent>\n                <DialogHeader>\n                    <DialogTitle>Edit Record</DialogTitle>\n                </DialogHeader>\n                <div className="space-y-4 py-4">\n                    <div className="space-y-2">\n                        <Label>Name</Label>\n                        <Input\n                            value={formData.name}\n                            onChange={(e) => setFormData(prev => ({\n                                ...prev,\n                                name: e.target.value\n                            }))}\n                            disabled={isLoading}\n                        />\n                    </div>\n                    <div className="space-y-2">\n                        <Label>Email</Label>\n                        <Input\n                            value={formData.email}\n                            onChange={(e) => setFormData(prev => ({\n                                ...prev,\n                                email: e.target.value\n                            }))}\n                            disabled={isLoading}\n                        />\n                    </div>\n                </div>\n                <DialogFooter>\n                    <Button\n                        onClick={handleUpdate}\n                        disabled={isLoading}\n                    >\n                        {isLoading ? (\n                            <>\n                                <Loader2 className="mr-2 h-4 w-4 animate-spin" />\n                                Saving...\n                            </>\n                        ) : (\n                            "Save Changes"\n                        )}\n                    </Button>\n                </DialogFooter>\n            </DialogContent>\n        </Dialog>\n    );\n}\n')))}c.isMDXComponent=!0}}]);